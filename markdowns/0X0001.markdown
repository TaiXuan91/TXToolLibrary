# 字符编码

虽然在学校学习语文课的时候，语言和文字是一起学习的，但实际上语言和文字不完全是一回事。一门语言可以用多种文字记录，一种文字也可以用于记录不同的语言。例如汉字可以用来记录汉语，也可以用来记录日语，而汉语可以用汉字来记录，也可以用拉丁字母（汉语拼音）来记录。具体来说我们语文课上、外语课上学的语法和词汇属于语言，而“ABCD”和“上大人孔乙己”属于文字。我们今天要聊的内容主要是关于文字的，而不是关于语言的。

文字发明至今也有几千年的历史了，如果展开聊，文字也是一个非常大的话题。因此我们仅仅截取历史长河中的一小段，然后再从这一小段中选一个片面来聊。这个一小段中的一个片面，就是文字的数字化。

## 字符和字形

语言的基本单位是词汇，文字的基本单位是单个的符号，或者说字符（Character）。例如拉丁字母“A”就是一个字符，汉字“孔”也是一个字符、数学符号“¬”也是字符。字符其实是一个抽象概念。以拉丁字母A为例，它的不同写法并不影响它是拉丁字母A，黑体**A**、斜体*A*、花体$\mathcal{A}$都是拉丁字母A。我们称这些同一个字符的不同写法为不同的字形（glyph）。

为了进一步说明字符这个概念的抽象性，我们先聊点题外话。我们都知道“爱”是一个抽象的概念。我们可以说拥抱和亲吻都是体现爱这一抽象概念的动作，但不能说亲吻或者拥抱就是爱本身。同样的，我们写在纸上的A、打印出来的A、屏幕上显示的A、你眼里看到的A其实都是字符A的字形。这些字形表示字符A，但是我们不能说这些字形就是字符A本身。字符A本身就是一个抽象概念（就像数学里的1），用什么形式来表示它都是可以的。哪怕你把它写成“B”或者别的什么形式也可以。只要阅读你写下的东西的人和你一样把“B”当作拉丁字母A的一种字形就可以。凯撒密码就是用了这个思路，把A写成“B”，把B写成“C”，把C写成“D”，如此这般，最后再把Z写成“A”。经过这样的变换，CAESAR就写成了“DBFTBS”。友军由于知道加密的方法，所以可以看懂这个单词，但对加密方法一无所知的敌军是看不懂的。

## 字符和数字

数字和字符的情况有点类似。数字也是抽线的概念，例如三个苹果可以表示数字3、三个香蕉也可以表示数字3、三个电脉冲也可以表示数字3，但这些都不是3本身，只是用它们来表示3这个抽象概念而已。





更准确一点来说，实际上我们写出来的，印出来的，屏幕上显示的都是字形而非字符本身。这些字形表示字符，但由于字符是一个抽象概念，你不能

有时候字形之间的差距可能会非常大，但是我们仍然认为这些字形属于





字符其实是一个抽象概念，不容易直观地对它进行描述，所以我们先举几个例子。





文本文件是最基本，最常用，也非常简单的一类的文件。浏览和编辑文本文件是基础中的基础。  为了和图文混排，字体样式繁多的文本类文件相区别，我们称不包含任何格式信息或非图像信息（仅仅包含编码为二进制数的文字符号）的文本文件为纯文本（Plain Text）。具体来说，在Word类软件中所编辑的就是富文本，而大多数程序源码则是以纯文本的形式编写和存储的。  当然，如果你喜欢也可以用纯文本来写小说，记日记什么的。只不过，大多数普通用户都选择了界面更为友好的软件。所以目前，纯文本的编辑和纯文本相关不再是计算机用户的必修课。只有做编程相关工作的人才会接触多一些。  这一篇文章将介绍一些和纯文本相关的知识点。下一期我们来聊几款编辑纯文本的工具。  字符编码  字符是人类的发明，用平面图案来表示、记录信息。计算机发明后，人类开始使用计算机处理文字信息。具体做法当然不是试图让计算机仿照人类写字直接在磁盘上刻出人类能识别的符号。而是在常用的字符和计算机所能处理的二进制数之间建立映射关系。这样就能把处理字符串（字符组成的序列）的问题转化为算术和逻辑的问题。  不过，由于语言、国别、维护团体等方面的原因，历史上出现过众多的编码方案。不同的编码方案中同一个字符可能对应不同的数字，或者有的字符在有的方案中就根本没有被编码。这一度给信息交流带来过麻烦。不过现在这种问题越来越不算是一个问题。目前需要重点了解的只有——ASCII和UTF-8。其中UTF-8还兼容ASCII，所以，其实只需要了解一种。  Unicode  作为一个额外的小知识，我顺便提及一下Unicode。Unicode也可以称为“Universal Coded Character Set”。为了结束各个国家，各个语种只为自己的语言字符编号的混乱局面。由国际组织主持编订了Unicode编码表。旨在为每一个人类语言符号提供一个独一无二的编码。无论拉丁字母，汉字，数学符号还是表情符号都能在表中查到。而且这个编码表会不断更新，以求不断补充完善。如果所有语言的文本文件在编码的时候都遵从Unicode的规定，就不会存在字符编码冲突的问题。  但是注意，Unicode只是一个字符表。表中尽量包含所有人类所用的语言符号，并且每一个字符都有一个独一无二的编码。但是这不意味着我们在计算机中必须直接用Unicode的字符编号来存储字符。直接用Unicode存储起码存在两个问题：  Unicode的符号总量一直在增长，需要用几位数字并不确定。可能这几年用六位二进制数就够了，过几年用八位二进制数都不够。 对于所用字符比较少的语言来说很多位是没有必要的。比如英文只用26个字母的大小写加一些标点符号。其实八位二进制足够了。但是Unicode字符编码的全长可远远不止八个二进制位。  UTF  UTF全称是Unicode Transformation Format。这是一套将Unicode字符编号转化为变长编码的方案。根据编码长度的基本单位不同，分为好几个版本。如果以8位（1个字节）为基本长度单位，那么就是UTF-8。如果以16位（2个字节）为基本长度单位，那么就是UTF-16。如果以32位（4个字节）为基本长度单位，那么就是UTF-32。我们以最普及，最常用的UTF-8为例介绍。  UTF-8以8位为基本长度单位。所以最短的UTF-8编码，也是8位表示一个字符。而排号比较靠后的编码就会比较长。当8位二进制数快用尽时，就再加上8位。当16位二进制数也快用进时就再加上8位。当24位二进制数又快用进时就再加上8位。再不够用就再加长。但是每次加长都是以8位为一个单位。  具体从Unicode编号到若干个字节组成的编码的转换方法见维基百科上的[UTF-8](https://en.wikipedia.org/wiki/UTF-8)条目。  几点注意事项：  UTF-8，UTF-16，UTF-32之间并不能直接相互转化。因为所采用的长度单位不同，所以最终转换出来的编码大概率不同。 由于微软的Windows系统中一直用“Unicode”称呼UTF-16，所以造成了非常大的混淆。一定要明确一个字符的UTF-16编码不等同于其Unicode编号。但是在Windows系统中有的写着Unicode的地方实际上是指UTF-16。  BOM的问题  现在一般的计算机都以8位为一个字节。所以UTF-16以上的编码方案（长度单位大于等于16的UTF编码方案）中都存在一个存储顺序的问题。比如UTF-16中每一节16位的编码都要拆成2个字节存储，占用2个字节的相邻内存单元。可以把高8位存储在高地址号的单元中，也可以反过来把高8位存储在低地址号的内存单元中。这样就又造成了分歧和不统一。不过大部分这种细节都被操作系统或者文本编辑器屏蔽了。作为用户倒是不用太操心这种问题。  为了说明存储顺序的问题，一般会在这些编码的文件头中加入BOM（Byte Order Mark）。也就是用开头几个字节的内容表示编码的存储方式。UTF-8也允许在文件头加入BOM。但是由于UTF-8根本不存在字节存储顺序的问题，所以不加BOM才是常用形式。一般情况下，不建议保存为带BOM的UTF-8。我们说到UTF-8的时候也一般是指不带BOM的形式。  之所以UTF-8的BOM成了一个问题，是因为一些Windows上的软件非要给UTF-8加上BOM。这样保存的文件拿到其他系统，用默认不带BOM的软件打开就会遭遇麻烦。  ASCII  ASCII是一套早在用电传打字机的时代就制定出来的一套字符编码方案。ASCII不是变长编码，1个字符8位二进制数。但是最高位留空，实际上只用了128个编号。出于尽量兼容已有编码方案的考虑，UTF-8的前128个字符和ASCII是基本一致的。  ASCII在制定时除了表示可以书写打印的所谓“可打印字符”（Printable Characters），还包括了一些控制打字机的控制命令。但是随着电传打字机的废弃，这些命令也大多停用了。虽然编号仍然留在ASCII中，但现在基本用不到。  目前仍然在用的几个控制符号在字符终端中被重新赋予了意义。关于这些控制字符在字符终端的意义请参考[VT-100字符终端的使用说明](https://vt100.net/docs/vt100-ug/)。  为了写代码方便，C语言中有一些通用的转义字符串被用来表示它们。比如`\t`表示水平制表，`\n`表示换行，`\r`表示回车。大部分编程语言中表示这些控制字符的方法都和C语言一致。一些文档或者手册中则用caret notation的约定来表示不可打印的控制字符。详细可以在维基百科的[ASCII](https://en.wikipedia.org/wiki/ASCII)条目中查到。  换行问题  电传打字机把换行打字分解为打字头回到最左端和纸张移动一行这两个动作。对应于这两个动作，分别使用`\r`和`\n`两个控制命令表示。到了计算机时代，字符终端也可以显示换行。但是工程师们在怎么表示换行的问题上产生了分歧。主流的观点就用三种。一种延续打字机的做法用`\r\n`表示（Windows的做法），一种认为只用`\r`就够了（Mac的做法），一种认为只用`\n`就够了（Unix，Linux的做法）。另外还有奇葩想用`\n\r`表示。  这种争论是永远没有终点的。主流的编辑器一般兼容以上所有的表示方法。我个人的意见是和Unix/Linux保持一致，使用`\n`。  吐槽 微软真的是麻烦制造者。换行符的问题，BOM的问题，混淆UTF-16和Unicode的问题都和微软的Windows有关。  编码和信息量的问题  字符编码的长度会影响到文本文件的大小。比如一个汉字在GBK中占2个字节，但在UTF-8中占3个字节。这样用UTF-8编码保存的文本是GBK格式汉字文本的约1.5倍。  但是，个人仍然建议所有非英文文本都用UTF-8保存，尤其是一些存在国际交流的场合。否则很可能遇到编码识别不了的尴尬。  而且在现在，由于编码方式造成的文件大小的差异其实无关紧要。一方面存储器很便宜了，没必要锱铢必较。另一方面，可以压缩来减少文件占用的空间。根据我的实验，GBK编码的汉字文本和UTF-8编码的汉字文本压缩后体积差不多大。因为虽然编码格式不同，但是信息量是差不多的。UTF-8中虽然汉字占了3个字节，但是每个汉字的UTF-8编码的最高几位都是相同的。压缩的时候这些重复的东西就会被压缩掉。  小节  综上本节所述，推荐的文本编码要符合以下要求：  UTF-8编码（不带BOM）。 LF（`\n`）表示换行。  由于UTF-8可以视为ASCII的超集，所以ASCII编码的纯英文文本也可以视为是UTF-8编码的。

作者：知则
https://www.bilibili.com/read/cv1331285
出处： bilibili