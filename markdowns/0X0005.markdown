# Unicode方案

Unicode方案是一个给字符编号的方案，它的目标是给古往今来所有人类书写符号分配独一无二的数字编号。给字符数字编号的好处就是在指代字符的时候不需要用它的字形也不需要用它的字义，这在对字符的表示、描述和研究中是非常有用的。例如在计算机中，你无法直接在硬盘上刻写字形，也不能

## Unicode并不简单

可能你会想，为什么给字符编号这样一个简单的问题都要专门提出一个世界性的标准方案。确实，给字符编号这个工作本身不难，就是列出来很多字符，然后给字符排序，分配编号。困难的是形成共识以及编号以外的工作。例如之前在字符编码的部分介绍过，如何确定一个书写符号系统的基本单位是一个非常复杂的问题，更不用说在兼容许多种差异巨大的书写系统的前提下。再例如，谁都想把自己最熟悉的，使用频率最高的字符排上比较短的号码，但是往往越短的号码越稀缺，协调不同的文字系统及其使用者是一件非常困难的事情。

正因为有这种种困难，Unicode标准并不仅仅是一张包含十几万个字符编号的表。除了码表，Unicode还包括上千页的标准说明以及处理Unicode字符程序库等相关子项目。因此想要详细了解Unicode的方方面面是非常困难的。我们这一期仅仅挑几个知则感觉有意思的话题来聊，想了解更多可以上Unicode官网看看。

Unicode官网：<https://home.unicode.org/>

## UTF

Unicode给字符的编号就是一个自然数，理论上是不限制这个编号的长度的。如果被编码的字符不断增加，那么用于编号的数字位数也不断增加。但是现实中的计算机保存的一般是限制长度的自然数，因此Unicode给字符分配的编号实际上并不适合直接用于计算机内字符或字符串的保存。为了解决这个问题，我们需要用到UTF。

UTF是Unicode标准的一部分，提供了UTF-8，UTF-16和UTF-32三套将Unicode编号转化为可供计算机存储的编码的方案。虽然分了三套方案，但是三者的思想是一样的，只是编码时的单位长度不同。我们以UTF-8为例说明。

UTF-8以8位字节为1个单元，Unicode编号在0X00到0X7F之间的字符直接以一个8位单元的低7位保存。超出此范围，但是小于等于0X07FF的字符用2个单元保存（由于UTF-8是边长编码所以，在转换后的代码中会有一些位用于区分不同长度的编码，因此2个8位单元编码的字符少于$2^{16}$个）。如果有编号比0X07FF还大但是小于0XFFFF的字符，就用3个单元保存。还有更大的编号就用4个单元保存。再大的编号目前还没有普遍使用所以标准还没有明确规定拓展方法。这些转化方法听着比较头大，但看一下这张表就一目了然了。

UTF-8转换规则表：

| Scalar Value               | First Byte | Second Byte | Third Byte | Fourth Byte |
| -------------------------- | ---------- | ----------- | ---------- | ----------- |
| 00000000 0xxxxxxx          | 0xxxxxxx   |             |            |             |
| 00000yyy yyxxxxxx          | 110yyyyy   | 10xxxxxx    |            |             |
| zzzzyyyy yyxxxxxx          | 1110zzzz   | 10yyyyyy    | 10xxxxxx   |             |
| 000uuuuu zzzzyyyy yyxxxxxx | 11110uuu   | 10uuzzzz    | 10yyyyyy   | 10xxxxxx    |

UTF-16的思路和UTF-8一致，但是以16位二进制数为基本单元。粗略来说用UTF-16编码编号小于0X80的字符会浪费额外的空间，而用UTF-16编码大于0X80的字符则不会比UTF-8占用更多空间，甚至会节约空间。这也就导致了UTF-8和UTF-16各有使用场景，不是简单的相互替换的关系。当写代码的时候编号小于0X80的字符（也就是ASCII字符）比较多，因而使用UTF-8更为合适。当使用非拉丁语书写文章的时候，由于字符编号都比较大，因而使用UTF-16更为合适。

问题在于，需要你选择编码方式的时候一般是在写源码或者做编程相关的工作，因而在需要选择编码方式的时候一律选则UTF-8就可以了。尽管这样做可能造成一定的空间浪费，但是在目前存储器都以MB、GB、TB做单位的情况下，文本文件浪费的这点空间其实是影响不大的。况且在传送和保存文件之前还可以压缩文件，经过压缩后因为编码方式造成的空间浪费会大大缩小。

## 字形和字体

Unicode仅仅给字符分配编号，UTF则根据这个编号给字符提供保存于计算机中的编码形式。但对于人来说无论是编号还是存储编码，都太难记忆和解读了，人们总是倾向于记忆字形。因而在计算机内部处理字符或者字符串（可以理解为“一串字符”），的时候可以让字符一直保留编码的形式。但是在和人交互的时候，必须将字符编码和字形做转换。不过Unicode现在的准则是注重字符而非字形，因而字形本身并不由Unicode规定，而是由字体确定的。举个例子，有的汉字在中日韩都使用，但是写法上存在细微差别，Unicode会给这样的字符只分配一个编号，而在不同环境中的不同写法，则由中日韩各自的字体来实现。不过“字符而非字形”这条原则，在Unicode中贯彻的并不是十分彻底，还是有一些同字异形被当作不同字符收录到Unicode中，这其中有历史原因，也有学术争论，还有难以妥协的分歧，甚至有工作的失误。不过这些瑕疵还不足以成为我们放弃Unicode的理由。

关于字形，其实还有很多话题可以聊，不过这一期恐怕篇幅不够了，我们以后再聊吧。

